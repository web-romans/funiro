@use "sass:math";

@function prc($pxOne, $pxTwo) {
    $result: math.div($pxOne, $pxTwo) * 100%;
    @return $result;
}

@function rem($px) {
    $result: math.div($px, 16) + rem;
    @return $result;
}

@function em($px) {
    $result: math.div($px, 16) + em;
    @return $result;
}

// Thx https://youtu.be/eaOAY0vIB4U
@mixin adaptive($property, $startSize, $minSize, $type) {
    $addSize: $startSize - $minSize;
    @if $type==1 {
        //меньше контейнера
        #{$property}: $startSize + px;
        @media (max-width: #{$maxWidthContainer + px}) {
            #{$property}: calc(#{$minSize + px} + #{$addSize} * ((100vw - 320px) / #{$maxWidthContainer - 320}));
        }
    } @else if $type==2 {
        //больше контейнера
        #{$property}: $startSize + px;
        @media (min-width: #{$maxWidthContainer + px}) {
            #{$property}: calc(#{$minSize + px} + #{$addSize} * ((100vw - 320px) / #{$maxWidth - 320}));
        }
    } @else {
        //всегда
        #{$property}: calc(#{$minSize + px} + #{$addSize} * ((100vw - 320px) / #{$maxWidth - 320}));
    }
}

@mixin adaptiveMinWidth($property, $startSize, $minSize, $minwidth) {
    $addSize: $startSize - $minSize;
    #{$property}: calc(
        #{$minSize + px} + #{$addSize} * ((100vw - #{$minwidth + px}) / #{$maxWidthContainer - #{$minwidth}})
    );
}

@mixin first-page-bg {
    width: 100%;
    position: relative;
    &::before,
    &::after {
        content: "";
        height: 100%;
        position: absolute;
        top: 0px;
        z-index: -1;
    }
    &::before {
        width: 63%;
        left: 0px;
        background-color: #f9f1e7;
    }
    &::after {
        width: 37%;
        right: 0px;
        background-color: #fcf8f3;
    }
}

// imgs
@mixin full-img {
    width: 100%;
    height: 100%;
    object-fit: cover;
}

@mixin transition {
    transition: all 0.2s ease-in-out;
}

@mixin opacity-bg {
    &::before {
        content: "";
        position: absolute;
        top: 0;
        right: 0;
        bottom: 0;
        left: 0;
        z-index: -1;
        background-color: #fff;
        opacity: 0.9;
    }
}

// hovers
@mixin hover-link {
    @include transition;
    &:hover {
        @include transition;
        color: var(--color-primary);
    }
}

// flex
@mixin flex-center {
    display: flex;
    align-items: center;
}

@mixin flex-all-center {
    display: flex;
    align-items: center;
    justify-content: center;
}

@mixin flex-center-start {
    display: flex;
    align-items: center;
    justify-content: flex-start;
}

@mixin flex-center-between {
    display: flex;
    align-items: center;
    justify-content: space-between;
}

@mixin flex-start-between {
    display: flex;
    align-items: flex-start;
    justify-content: space-between;
}
@mixin flex-start-center {
    display: flex;
    align-items: center;
    justify-content: center;
}

// styles

@mixin nav-link-text {
    font-family: "Gilroy", sans-serif;
    font-weight: 500;
    font-size: rem(16);
    line-height: 1.5;
    color: var(--color-black-gray);
}

@mixin coll-title {
    font-weight: 700;
    font-size: rem(24);
    line-height: 1.2;
    color: #000000;
}

@mixin text {
    font-weight: 500;
    font-size: rem(16);
    line-height: 1.5;
    color: var(--color-dove-gray);
}
